gnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnfgnf1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
#include "stdafx.h"
#include<fstream>
#include<iostream>
#include<conio.h>
using namespace std;
const int N= 4; // liczba do premutacji w moim przypadku 4int tab[3] = {1,2,3};
 
int tab[N];
 
void wypelnij_tablice()
{
    for(int i =0; i<=N; i++)
    {
        tab[i]=i+1;
    }
}
 
void wyswietl ();
void permutacja (); // funkcja generujaca permutacje
int silnia(int i); // funkcja liczaca ilosc mozliwych permutacji zbioru
 
int _tmain(int argc, _TCHAR* argv[])
{
    wypelnij_tablice();
 
    ofstream plik ("permutacje.txt");
 
         wyswietl() ;
 for(int i=0; i< silnia(N)-1 ; i++)
{
permutacja();
// funkcja zapisujaca do pliku tekstowego
for(int i=0; i<4; i++)
{
plik<< tab[i];
}
plik<< '\n' ;
wyswietl() ;
if(i==10) { system("PAUSE"); system("CLS");  }
}
plik.close();
system("PAUSE");
return 0;
}
  void wyswietl ()
{
for(int i=0; i < N; i++)
{
cout << tab[i] ;
}
cout << endl;
}
void permutacja()
{
int i, j, k;
  if (N < 2)
return;
  // wyznaczenie elementu mniejszego niz jego sasiad z prawej strony
i = N - 1;
while ((i > 0) && (tab[i - 1] >= tab[i]))
i--;
  // wyznaczenie elemementu wiekszego od znalezionego
if (i > 0) {
j = N;
while ((j > 0) &&(tab[j - 1] <= tab[i - 1]))
j--;
}
  // zmiana miejscami dwoch znalezionych elementow
if ((i > 0) && (j > 0)) {
swap(tab[i-1], tab[j-1]);
  }
  // odbicie lustrzane znalezionych elementow
  for (i++, j = N; i < j; i++, j--) {
swap(tab[i-1], tab[j-1]);
}
}
        int silnia(int i)
{
if(i==1) return 1;
else return i*silnia(i-1);